---
alwaysApply: true
---
# Cursor Rules: Temporary Directory Operations

## 核心原则
在 agent 模式下，所有文件创建和执行操作应优先使用临时目录，保护工作空间的整洁性。

## 文件创建规则

### 1. 默认操作位置
- **所有命令执行、文件创建操作默认在 `/tmp` 目录下进行**
- 创建临时文件时使用有意义的子目录名称，如 `/tmp/cursor-agent-work/`
- 使用时间戳或随机后缀避免文件名冲突

### 2. 工作空间文件创建限制
- **禁止在当前工作目录或工作空间内创建任何文件**，除非用户明确要求
- 用户明确要求的标志：
  - 明确指定文件路径：`创建 ./config.json 文件`
  - 明确指定位置：`在当前目录下创建...`
  - 明确指定工作空间：`在项目中添加...`
  - 使用项目相关词汇：`添加到项目`、`集成到代码库`

### 3. 测试和实验规则
- **所有测试代码、示例代码、实验性代码必须在 `/tmp` 目录下创建**
- 测试完成后提醒用户是否需要将代码移动到正式位置
- 创建测试时使用描述性目录名：`/tmp/test-[功能名]-[时间戳]/`

## 具体实现指导

### 执行命令时
```bash
# 好的做法
cd /tmp && mkdir -p cursor-work-$(date +%s)
cd /tmp/cursor-work-*/
python test_script.py

# 避免的做法
python test_script.py  # 在当前目录执行
```

### 创建文件时
```bash
# 好的做法
cat > /tmp/example.py << 'EOF'
# 测试代码内容
EOF

# 避免的做法（除非用户明确要求）
cat > example.py << 'EOF'
# 在工作目录创建文件
EOF
```

### 文件组织建议
```
/tmp/cursor-agent-[session-id]/
├── scripts/          # 脚本文件
├── data/            # 数据文件  
├── output/          # 输出结果
└── tests/           # 测试文件
```

## 异常情况处理

### 用户明确要求时
- 如果用户明确指定要在工作空间创建文件，则遵循用户要求
- 创建前确认：`您确定要在当前工作空间创建 [文件名] 吗？`

### 系统限制时
- 如果 `/tmp` 不可用，使用用户主目录下的临时文件夹：`~/tmp/cursor-agent/`
- 如果需要持久化，询问用户指定位置

## 清理规则

### 会话结束时
- 提醒用户临时文件的位置
- 询问是否需要保留或移动文件
- 提供清理命令：`rm -rf /tmp/cursor-agent-*`

### 自动清理
- 避免在 `/tmp` 中创建过多文件
- 使用完毕后及时清理不需要的临时文件

## 示例对话

**用户**: "帮我写个 Python 脚本测试 API"
**Agent**: "我将在 `/tmp` 目录下创建测试脚本..."

**用户**: "创建一个 config.json 配置文件"  
**Agent**: "我将在 `/tmp` 目录下创建配置文件进行测试，如果您需要在项目中使用，请明确告知..."

**用户**: "在项目中添加 requirements.txt 文件"
**Agent**: "明白，我将在当前工作空间创建 requirements.txt 文件..."

## 关键提醒

**始终优先使用 `/tmp` 目录**
**保护工作空间整洁性**
**明确区分测试和正式文件**
**用户明确要求时才在工作空间操作**

---
*这些规则旨在保持工作空间的整洁，避免意外创建不必要的文件，同时确保测试和实验的安全性。*
# Cursor Rules: Temporary Directory Operations

## 核心原则
在 agent 模式下，所有文件创建和执行操作应优先使用临时目录，保护工作空间的整洁性。

## 文件创建规则

### 1. 默认操作位置
- **所有命令执行、文件创建操作默认在 `/tmp` 目录下进行**
- 创建临时文件时使用有意义的子目录名称，如 `/tmp/cursor-agent-work/`
- 使用时间戳或随机后缀避免文件名冲突

### 2. 工作空间文件创建限制
- **禁止在当前工作目录或工作空间内创建任何文件**，除非用户明确要求
- 用户明确要求的标志：
  - 明确指定文件路径：`创建 ./config.json 文件`
  - 明确指定位置：`在当前目录下创建...`
  - 明确指定工作空间：`在项目中添加...`
  - 使用项目相关词汇：`添加到项目`、`集成到代码库`

### 3. 测试和实验规则
- **所有测试代码、示例代码、实验性代码必须在 `/tmp` 目录下创建**
- 测试完成后提醒用户是否需要将代码移动到正式位置
- 创建测试时使用描述性目录名：`/tmp/test-[功能名]-[时间戳]/`

## 具体实现指导

### 执行命令时
```bash
# 好的做法
cd /tmp && mkdir -p cursor-work-$(date +%s)
cd /tmp/cursor-work-*/
python test_script.py

# 避免的做法
python test_script.py  # 在当前目录执行
```

### 创建文件时
```bash
# 好的做法
cat > /tmp/example.py << 'EOF'
# 测试代码内容
EOF

# 避免的做法（除非用户明确要求）
cat > example.py << 'EOF'
# 在工作目录创建文件
EOF
```

### 文件组织建议
```
/tmp/cursor-agent-[session-id]/
├── scripts/          # 脚本文件
├── data/            # 数据文件  
├── output/          # 输出结果
└── tests/           # 测试文件
```

## 异常情况处理

### 用户明确要求时
- 如果用户明确指定要在工作空间创建文件，则遵循用户要求
- 创建前确认：`您确定要在当前工作空间创建 [文件名] 吗？`

### 系统限制时
- 如果 `/tmp` 不可用，使用用户主目录下的临时文件夹：`~/tmp/cursor-agent/`
- 如果需要持久化，询问用户指定位置

## 清理规则

### 会话结束时
- 提醒用户临时文件的位置
- 询问是否需要保留或移动文件
- 提供清理命令：`rm -rf /tmp/cursor-agent-*`

### 自动清理
- 避免在 `/tmp` 中创建过多文件
- 使用完毕后及时清理不需要的临时文件

## 示例对话

**用户**: "帮我写个 Python 脚本测试 API"
**Agent**: "我将在 `/tmp` 目录下创建测试脚本..."

**用户**: "创建一个 config.json 配置文件"  
**Agent**: "我将在 `/tmp` 目录下创建配置文件进行测试，如果您需要在项目中使用，请明确告知..."

**用户**: "在项目中添加 requirements.txt 文件"
**Agent**: "明白，我将在当前工作空间创建 requirements.txt 文件..."

## 关键提醒

**始终优先使用 `/tmp` 目录**
**保护工作空间整洁性**
**明确区分测试和正式文件**
**用户明确要求时才在工作空间操作**

---
*这些规则旨在保持工作空间的整洁，避免意外创建不必要的文件，同时确保测试和实验的安全性。*
